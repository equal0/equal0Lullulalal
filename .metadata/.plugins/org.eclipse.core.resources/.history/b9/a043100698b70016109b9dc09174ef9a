package client;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import data.ChatData;

public class ChatClient extends JFrame implements Runnable, ActionListener{
	private ObjectOutputStream oos;
	private ObjectInputStream ois;
	private Socket socket;
	private JLabel lbNorth;
	private JScrollPane scroll;
	private JTextArea textArea;
	
	private JTextField tfMsg;
	private JList list;
	
	String name;
	
	public ChatClient(){
		
		name = JOptionPane.showInputDialog("ID 입력 하세요.");
		if(name == null)
			System.exit(0);
		
		this.setBounds(200, 100, 300, 500);
		this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

		this.addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent arg0) {
				sendChatData(ChatData.DISCONNECT, null, name);
				System.exit(0); 
			}
		}); 
		lbNorth = new JLabel("Client 1:1");
		getContentPane().add(lbNorth, BorderLayout.NORTH);
		
		scroll = new JScrollPane();
		textArea = new JTextArea();
		scroll.setViewportView(textArea);
		getContentPane().add(scroll, BorderLayout.CENTER);
		
		list = new JList();
		scroll.setRowHeaderView(list);
		
		tfMsg = new JTextField();
		tfMsg.addActionListener(this);
		getContentPane().add(tfMsg, BorderLayout.SOUTH);
		
		this.setVisible(true);
		
		connect();
		new Thread(this).start();
	}
	
	public void connect(){
		try {
			
			socket = new Socket("localhost", 9999);
			ois = new ObjectInputStream(socket.getInputStream());
			oos = new ObjectOutputStream(socket.getOutputStream());
			
			sendChatData(ChatData.FIRST_CONNECT, null, name);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args){
		new ChatClient();
	}

	//readObject
	@Override
	public void run() {
		boolean isConnected = true;
		while(isConnected){
			ChatData data = null;
			try {
				
				data = (ChatData)ois.readObject();
				textArea.append(data.getMessage() + "\n");
				scroll.getVerticalScrollBar().setValue(scroll.getVerticalScrollBar().getMaximum());
				switch(data.getState()){
				case ChatData.FIRST_CONNECT:
				case ChatData.DISCONNECT:
					list.removeAll();
					list.setListData(data.getUserList().toArray());
					break;
				}


			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
				isConnected = false;
			}
		}
	}

	public void sendChatData(int msgType, String meg, String name){
		ChatData msgToClient = new ChatData(msgType, 
				meg, 
				name);
		try {
			oos.writeObject(msgToClient);
			oos.reset();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}
	
	//writeObject
	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == tfMsg){
			sendChatData(ChatData.CHAT_MESSAGE,
					name+" : " + tfMsg.getText(),
					name);
			tfMsg.setText("");
		}
	}
	
}
