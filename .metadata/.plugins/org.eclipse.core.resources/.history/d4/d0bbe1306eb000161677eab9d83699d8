package multi;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import manager.SESManagerInterface;
import vo.Human;
import vo.Professor;
import vo.Staff;
import vo.Trainee;

public class SESServerManager implements SESManagerInterface {
	private ArrayList<Human> humanList = new ArrayList<>();
	private Connection con;
	private PreparedStatement ps;
	private PreparedStatement ps2;
	private ResultSet rs;
	
	public SESServerManager() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@127.0.0.1:1521:XE","hr","hr");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public boolean insertHuman(Human human) {
		for (int i = 0; i < humanList.size(); i++) {
			if (humanList.get(i).getJumin().equals(human.getJumin())) {
				return false;
			}
		}
		
		String sql = "insert into humantest values(?,?,?,?)";
		try {
			ps = con.prepareStatement(sql);
			ps.setString(1, human.getName());
			ps.setString(2, human.getAge()+"");
			ps.setString(3, human.getJumin());
			if(human instanceof Professor) {
				ps.setString(4, "professor");
				ps2 = con.prepareStatement("insert into professortest values(?,?)");
				ps2.setString(1, human.getJumin());
				ps2.setString(2, ((Professor) human).getMajor());
			} else if(human instanceof Trainee){
				ps.setString(4, "Trainee");
				ps2 = con.prepareStatement("insert into traineetest values(?,?)");
				ps2.setString(1, human.getJumin());
				ps2.setString(2, ((Trainee) human).getStdNo());
			} else if(human instanceof Staff){
				ps.setString(4, "Staff");
				ps2 = con.prepareStatement("insert into stafftest values(?,?)");
				ps2.setString(1, human.getJumin());
				ps2.setString(2, ((Staff) human).getField());
			}
			ps.executeUpdate();
			ps2.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		humanList.add(human);
		return true;
	}

	public Human findHuman(String jumin) {
		for (int i = 0; i < humanList.size(); i++) {
			if (humanList.get(i).getJumin().equals(jumin))
				return humanList.get(i);
		}
		return null;
	}
	
	@Override
	public void updateHuman(int index, Human human) {
		humanList.set(index, human);
	}

	public boolean deleteHuman(String jumin) {
		boolean result = false;
		for (int i = 0; i < humanList.size(); i++) {
			if (humanList.get(i).getJumin().equals(jumin))
				humanList.remove(i);
			result = true;
		}
		return result;
	}

	public ArrayList<Human> showAll() {
		
		String sql1 = "select human.name, human.age, human.jumin, prof.major"
						+ " from humantest human, professortest prof"
						+ " where human.jumin = prof.jumin";
		String sql2 = "select human.name, human.age, human.jumin, trainee.stdno"
				+ " from humantest human, traineetest trainee"
				+ " where human.jumin = trainee.jumin";
		String sql3 = "select human.name, human.age, human.jumin, staff.field"
				+ " from humantest human, stafftest staff"
				+ " where human.jumin = staff.jumin";
		try {
			Statement stat = con.createStatement();
			rs = stat.executeQuery(sql1);
			while(rs.next()){
				String name = rs.getString("name");
				int age = Integer.parseInt(rs.getString("age"));
				String jumin = rs.getString("jumin");
				String major = rs.getString("major");
				Human humanP = new Professor(name, age, jumin, major);
				humanList.add(humanP);
			}
			rs = stat.executeQuery(sql2);
			while(rs.next()){
				String name = rs.getString("name");
				int age = Integer.parseInt(rs.getString("age"));
				String jumin = rs.getString("jumin");
				String stdNo = rs.getString("stdno");
				Human humanT = new Trainee(name, age, jumin, stdNo);
				humanList.add(humanT);
			}
			rs = stat.executeQuery(sql3);
			while(rs.next()){
				String name = rs.getString("name");
				int age = Integer.parseInt(rs.getString("age"));
				String jumin = rs.getString("jumin");
				String field = rs.getString("field");
				Human humanS = new Staff(name, age, jumin, field);
				humanList.add(humanS);
			}
		} catch (SQLException e) {
			System.out.println("SQLException");
		}
		
		return (ArrayList<Human>) humanList.clone();
	}
	public void saveData() {
		try {
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("d:/SESStep4"));
			oos.writeObject(humanList);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void readData() {
		File file = new File("d:/SESStep4");
		if (file.exists()) {
			try {
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream("d:/SESStep4"));
				try {
					humanList = (ArrayList<Human>) ois.readObject();
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
